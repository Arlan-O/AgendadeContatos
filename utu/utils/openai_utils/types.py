from typing import TypedDict, Union, Optional, Literal, Iterable

import httpx
from openai._types import Headers, Query, Body, NotGiven, NOT_GIVEN
from openai.types.shared import ChatModel, ResponsesModel, Reasoning, ReasoningEffort
from openai.types.chat.completion_create_params import ResponseFormat
from openai.types.responses.response_create_params import ToolChoice
from openai.types.chat import ChatCompletionToolParam, ChatCompletionMessageParam
from openai.types.responses import ResponseInputParam, ResponseTextConfigParam, ToolParam


class OpenAICreateBaseParams(TypedDict):
    stream: Optional[bool] = False
    # from openai.resources.chat.completions.Completions.create
    extra_headers: Headers | None = (None,)
    extra_query: Query | None = (None,)
    extra_body: Body | None = (None,)
    timeout: float | httpx.Timeout | None | NotGiven = (NOT_GIVEN,)


# CompletionCreateParams | https://platform.openai.com/docs/api-reference/chat/create
class OpenAIChatCompletionParams(TypedDict, OpenAICreateBaseParams):
    # NOTE: only for typing
    messages: Iterable[ChatCompletionMessageParam]  # required
    model: Union[str, ChatModel]  # required
    frequency_penalty: Optional[
        float
    ]  # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    logit_bias: Optional[
        dict[str, int]
    ]  # Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    logprobs: Optional[
        bool
    ]  # Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    max_completion_tokens: Optional[int]
    max_tokens: Optional[int]
    n: Optional[int]
    presence_penalty: Optional[
        float
    ]  # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    reasoning_effort: Optional[ReasoningEffort]
    response_format: ResponseFormat
    seed: Optional[int]
    temperature: Optional[
        float
    ]  # 0.5, What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    top_p: Optional[
        float
    ]  # 0.9, An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    tools: Optional[
        list[ChatCompletionToolParam]
    ]  # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    tool_choice: Optional[
        Literal["none", "auto", "required"]
    ]  # Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
    parallel_tool_calls: Optional[bool]  # Whether to call tools in parallel.
    stop: Optional[
        Union[str, list[str]]
    ]  # Up to 4 sequences where the model will stop generating further tokens. The returned text will not contain these sequences.
    top_logprobs: Optional[
        int
    ]  # An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.


# ResponseCreateParams | https://platform.openai.com/docs/api-reference/responses/create
class OpenAIResponsesParams(TypedDict, OpenAICreateBaseParams):
    input: Union[str, ResponseInputParam]
    instructions: Optional[str]
    max_output_tokens: Optional[int]
    max_tool_calls: Optional[int]
    model: ResponsesModel
    parallel_tool_calls: Optional[bool]
    previous_response_id: Optional[str]
    reasoning: Optional[Reasoning]
    temperature: Optional[float]
    text: ResponseTextConfigParam
    tool_choice: ToolChoice
    tools: Iterable[ToolParam]
    top_logprobs: Optional[int]
    top_p: Optional[float]
    truncation: Optional[Literal["auto", "disabled"]]


OpenAIChatCompletionParamsKeys = OpenAIChatCompletionParams.__annotations__.keys()
OpenAIResponsesParamsKeys = OpenAIResponsesParams.__annotations__.keys()
