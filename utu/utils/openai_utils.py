import os
import logging
from typing import AsyncIterator, TypedDict, Union, Optional, Literal, Iterable

import httpx
from openai import AsyncOpenAI, AsyncStream
from openai.types.shared import ChatModel, ResponsesModel, Reasoning, ReasoningEffort
from openai._types import Headers, Query, Body, NotGiven, NOT_GIVEN
from openai.types.chat import (
    ChatCompletion, ChatCompletionChunk, 
    CompletionCreateParams,
    ChatCompletionToolParam, ChatCompletionMessageParam,
    ChatCompletionMessageToolCall, ChatCompletionMessage, 
)
from openai.types.chat.completion_create_params import ResponseFormat
from openai.types.responses import (
    Response, ResponseStreamEvent,
    ResponseCreateParams,
    ResponseInputParam, ResponseTextConfigParam, ToolParam
)
from openai.types.responses.response_create_params import ToolChoice

from .print_utils import PrintUtils

logger = logging.getLogger(__name__)


class OpenAICreateBaseParams(TypedDict):
    stream: Optional[bool] = False
    # from openai.resources.chat.completions.Completions.create
    extra_headers: Headers | None = None,
    extra_query: Query | None = None,
    extra_body: Body | None = None,
    timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,


# CompletionCreateParams | https://platform.openai.com/docs/api-reference/chat/create
class OpenAIChatCompletionParams(TypedDict, OpenAICreateBaseParams):
    # NOTE: only for typing
    messages: Iterable[ChatCompletionMessageParam]  # required
    model: Union[str, ChatModel]  # required
    frequency_penalty: Optional[float]  # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    logit_bias: Optional[dict[str, int]]  # Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    logprobs: Optional[bool]  # Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    max_completion_tokens: Optional[int]
    max_tokens: Optional[int]
    n: Optional[int]
    presence_penalty: Optional[float]  # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    reasoning_effort: Optional[ReasoningEffort]
    response_format: ResponseFormat
    seed: Optional[int]
    temperature: Optional[float]  # 0.5, What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    top_p: Optional[float]  # 0.9, An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    tools: Optional[list[ChatCompletionToolParam]]  # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    tool_choice: Optional[Literal["none", "auto", "required"]]  # Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
    parallel_tool_calls: Optional[bool]  # Whether to call tools in parallel.
    stop: Optional[Union[str, list[str]]]  # Up to 4 sequences where the model will stop generating further tokens. The returned text will not contain these sequences.
    top_logprobs: Optional[int]  # An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.


OpenAIChatCompletionParamsKeys = OpenAIChatCompletionParams.__annotations__.keys()


# ResponseCreateParams | https://platform.openai.com/docs/api-reference/responses/create
class OpenAIResponsesParams(TypedDict, OpenAICreateBaseParams):
    input: Union[str, ResponseInputParam]
    instructions: Optional[str]
    max_output_tokens: Optional[int]
    max_tool_calls: Optional[int]
    model: ResponsesModel
    parallel_tool_calls: Optional[bool]
    previous_response_id: Optional[str]
    reasoning: Optional[Reasoning]
    temperature: Optional[float]
    text: ResponseTextConfigParam
    tool_choice: ToolChoice
    tools: Iterable[ToolParam]
    top_logprobs: Optional[int]
    top_p: Optional[float]
    truncation: Optional[Literal["auto", "disabled"]]

OpenAIResponsesParamsKeys = OpenAIResponsesParams.__annotations__.keys()


class OpenAIUtils:
    @staticmethod
    def print_message(message: ChatCompletionMessage) -> None:
        if hasattr(message, "reasoning_content") and message.reasoning_content:
            PrintUtils.print_info(f"{message.reasoning_content}")
        if message.content:
            PrintUtils.print_bot(f"{message.content}", add_prefix=True)
        if message.tool_calls:
            for tool_call in message.tool_calls:
                PrintUtils.print_bot(f"<{tool_call.function.name}>{tool_call.function.arguments}", add_prefix=True)

    @staticmethod
    async def print_stream(stream: AsyncIterator[ChatCompletionChunk]) -> ChatCompletionMessage:
        final_tool_calls: dict[int, ChatCompletionMessageToolCall] = {}
        content = ""
        async for chunk in stream:
            delta = chunk.choices[0].delta
            if hasattr(delta, "reasoning_content") and delta.reasoning_content:
                PrintUtils.print_info(f"{delta.reasoning_content}", end="", color="green")
            if delta.content:
                content += delta.content
                PrintUtils.print_info(f"{delta.content}", end="", color="gray")
            if delta.tool_calls:
                for tool_call in delta.tool_calls:
                    index = tool_call.index
                    if index not in final_tool_calls:
                        final_tool_calls[index] = tool_call
                        PrintUtils.print_info(f"<{tool_call.function.name}>{tool_call.function.arguments}", end="", color="blue")
                    else:
                        if final_tool_calls[index].function.arguments:
                            final_tool_calls[index].function.arguments += tool_call.function.arguments
                        else:
                            final_tool_calls[index].function.arguments = tool_call.function.arguments
                        PrintUtils.print_info(f"{tool_call.function.arguments}", end="", color="blue")
        PrintUtils.print_info("")  # print a newline
        tool_calls = [ChatCompletionMessageToolCall(
            id=tool_call.id,
            function=tool_call.function.model_dump(),
            type=tool_call.type # type is always "function"
        ) for tool_call in final_tool_calls.values()]
        message = ChatCompletionMessage(
            role="assistant",
            content=content,
            tool_calls=tool_calls
        )
        OpenAIUtils.print_message(message)
        return message

    @staticmethod
    def process_chat_completion_params(kwargs: OpenAIChatCompletionParams, default_config: OpenAIChatCompletionParams) -> OpenAIChatCompletionParams:
        """Process chat completion params, convert str to list of messages, merge default config"""
        assert "messages" in kwargs
        if isinstance(kwargs["messages"], str):
            kwargs["messages"] = [{"role": "user", "content": kwargs["messages"]}]
        return OpenAIUtils._merge_default_config(kwargs, default_config)

    @staticmethod
    def process_responses_params(kwargs: OpenAIResponsesParams, default_config: OpenAIResponsesParams) -> OpenAIResponsesParams:
        """Process responses params, convert str to list of messages, merge default config"""
        if "input" not in kwargs:
            # try parse query for chat.completions
            assert "messages" in kwargs
            input = kwargs.pop("messages")
            if isinstance(input, str):
                kwargs["input"] = [{"role": "user", "content": input}]
            else:
                kwargs["input"] = input
        else:
            if isinstance(kwargs["input"], str):
                kwargs["input"] = [{"role": "user", "content": kwargs["input"]}]
        return OpenAIUtils._merge_default_config(kwargs, default_config)

    @staticmethod
    def _merge_default_config(kwargs: dict, default_config: dict) -> dict:
        """Merge default config"""
        for k, v in default_config.items():
            if k not in kwargs:
                kwargs[k] = v
        return kwargs

    @staticmethod
    def check_known_keys(kwargs: dict, known_keys: set[str]) -> set:
        """Check if all keys in kwargs are in known_keys"""
        unknown_keys = set(kwargs.keys()) - known_keys
        return unknown_keys

class SimplifiedAsyncOpenAI(AsyncOpenAI):
    """Simplified OpenAI client for chat.completions and responses API, with default config"""
    def __init__(
        self,
        *,
        type: Literal["chat.completions", "responses"] = None,
        # openai client kwargs
        api_key: str | None = None,
        base_url: str | None = None,
        # default configs
        **kwargs: dict,
    ) -> None:
        print(f"> type: {type}, base_url: {base_url}, kwargs: {kwargs}")
        super().__init__(
            api_key=api_key or os.getenv("UTU_LLM_API_KEY") or "xxx",
            base_url=base_url or os.getenv("UTU_LLM_BASE_URL")
        )
        self.type = type or os.getenv("UTU_LLM_TYPE", "chat.completions")
        self.type_create_params = OpenAIChatCompletionParamsKeys if self.type == "chat.completions" else OpenAIResponsesParamsKeys
        self.default_config = self._process_kwargs(kwargs)

    def _process_kwargs(self, kwargs: dict) -> dict:
        # parse kwargs for ChatCompletionParams
        default_config = {}
        for k, v in kwargs.items():
            if k in self.type_create_params:
                default_config[k] = v
        default_config["model"] = default_config.get("model", os.getenv("UTU_LLM_MODEL"))
        return default_config

    async def query_one(self, **kwargs) -> str:
        """Simplified chat.complete / responses API
        WARNING: Only for basic text i/o usage! You should not use the method with querying with customized configs!
        """
        if "stream" in kwargs:
            assert kwargs["stream"] is False, "stream is not supported in `query_one`"

        if self.type == "chat.completions":
            chat_completion: ChatCompletion = await self.chat_completions_create(**kwargs)
            return chat_completion.choices[0].message.content
        elif self.type == "responses":
            response: Response = await self.responses_create(**kwargs)
            return response.output_text  # NOTE: will not return toolcall or reasoning
        else:
            raise ValueError(f"Unknown type: {self.type}")

    async def chat_completions_create(self, **kwargs) -> ChatCompletion | AsyncStream[ChatCompletionChunk]:
        assert self.type == "chat.completions", "`chat_completions_create` is not supported for responses API"
        unknown_params = OpenAIUtils.check_known_keys(kwargs, self.type_create_params)
        if unknown_params:
            logger.warning(f"Unknown parameters: {unknown_params} for {self.type} API!")
        kwargs = OpenAIUtils.process_chat_completion_params(kwargs, self.default_config)
        return await self.chat.completions.create(**kwargs)

    async def responses_create(self, **kwargs) -> Response | AsyncStream[ResponseStreamEvent]:
        unknown_params = OpenAIUtils.check_known_keys(kwargs, self.type_create_params)
        if unknown_params - set("messages"):  #ignore
            logger.warning(f"Unknown parameters: {unknown_params} for {self.type} API!")
        assert self.type == "responses", "`responses_create` is not supported for chat.completions API"
        kwargs = OpenAIUtils.process_responses_params(kwargs, self.default_config)
        return await self.responses.create(**kwargs)
