import os
from typing import AsyncIterator

from openai import AsyncOpenAI, AsyncStream
from openai.types.chat import ChatCompletionChunk, ChatCompletionMessageToolCall, ChatCompletionMessage
from openai.types.chat.chat_completion import ChatCompletion

from .print_utils import PrintUtils


# see default values in https://platform.openai.com/docs/api-reference/chat/create
OPENAI_DEFAULT_CONFIG = {
    "messages": [],  # required
    "model": "",  # required
    "frequency_penalty": 0.0,  # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    "max_completion_tokens": None,
    "n": 1,
    "presence_penalty": 0.0,  # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    "seed": None,
    "stream": False,
    "temperature": 0.5,  # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    "top_p": 0.9,  # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    "tools": [],  # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    "tool_choice": "auto",  # Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
    "parallel_tool_calls": None,  # Whether to call tools in parallel.
    "logit_bias": None,  # Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    "logprobs": False,  # Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    "top_logprobs": None,  # An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    "stop": None,  # Up to 4 sequences where the model will stop generating further tokens. The returned text will not contain these sequences.
    # from openai.resources.chat.completions.Completions.create
    "extra_headers": None,
    "extra_query": None,
    "extra_body": None,
}


class OpenAIUtils:
    @staticmethod
    def print_message(message: ChatCompletionMessage) -> None:
        if hasattr(message, "reasoning_content") and message.reasoning_content:
            PrintUtils.print_info(f"{message.reasoning_content}")
        if message.content:
            PrintUtils.print_bot(f"{message.content}", add_prefix=True)
        if message.tool_calls:
            for tool_call in message.tool_calls:
                PrintUtils.print_bot(f"<{tool_call.function.name}>{tool_call.function.arguments}", add_prefix=True)

    @staticmethod
    async def print_stream(stream: AsyncIterator[ChatCompletionChunk]) -> ChatCompletionMessage:
        final_tool_calls: dict[int, ChatCompletionMessageToolCall] = {}
        content = ""
        async for chunk in stream:
            delta = chunk.choices[0].delta
            if hasattr(delta, "reasoning_content") and delta.reasoning_content:
                PrintUtils.print_info(f"{delta.reasoning_content}", end="", color="green")
            if delta.content:
                content += delta.content
                PrintUtils.print_info(f"{delta.content}", end="", color="gray")
            if delta.tool_calls:
                for tool_call in delta.tool_calls:
                    index = tool_call.index
                    if index not in final_tool_calls:
                        final_tool_calls[index] = tool_call
                        PrintUtils.print_info(f"<{tool_call.function.name}>{tool_call.function.arguments}", end="", color="blue")
                    else:
                        if final_tool_calls[index].function.arguments:
                            final_tool_calls[index].function.arguments += tool_call.function.arguments
                        else:
                            final_tool_calls[index].function.arguments = tool_call.function.arguments
                        PrintUtils.print_info(f"{tool_call.function.arguments}", end="", color="blue")
        PrintUtils.print_info("")  # print a newline
        tool_calls = [ChatCompletionMessageToolCall(
            id=tool_call.id,
            function=tool_call.function.model_dump(),
            type=tool_call.type # type is always "function"
        ) for tool_call in final_tool_calls.values()]
        message = ChatCompletionMessage(
            role="assistant",
            content=content,
            tool_calls=tool_calls
        )
        OpenAIUtils.print_message(message)
        return message

    @staticmethod
    def process_chat_completion_params(kwargs: dict, base_kwargs: dict = None) -> dict:
        if base_kwargs is None:
            base_kwargs = OPENAI_DEFAULT_CONFIG
        assert "messages" in kwargs
        if isinstance(kwargs["messages"], str):
            kwargs["messages"] = [{"role": "user", "content": kwargs["messages"]}]
        # use the default model if not specified
        if "model" not in kwargs:
            kwargs["model"] = base_kwargs["model"]
        return kwargs



class SimplifiedAsyncOpenAI(AsyncOpenAI):
    _default_config: dict

    def __init__(
        self,
        *,
        api_key: str | None = None,
        base_url: str | None = None,
        **kwargs: dict,
    ) -> None:
        # parse kwargs
        default_config, openai_client_kwargs = {}, {}
        for k, v in kwargs.items():
            if k in OPENAI_DEFAULT_CONFIG:
                default_config[k] = v
            else:
                openai_client_kwargs[k] = v
        api_key = api_key or os.getenv("UTU_API_KEY") or "xxx"
        base_url = base_url or os.getenv("UTU_BASE_URL")
        default_config["model"] = default_config.get("model", os.getenv("UTU_MODEL"))
        
        super().__init__(api_key=api_key, base_url=base_url, **openai_client_kwargs)
        self._default_config = OPENAI_DEFAULT_CONFIG.copy()
        self._default_config.update(default_config)

    async def query_one(self, **kwargs) -> str:
        """Simplified chat.complete API"""
        kwargs = OpenAIUtils.process_chat_completion_params(kwargs, self._default_config)
        chat_completion: ChatCompletion = await self.chat.completions.create(**kwargs)
        return chat_completion.choices[0].message.content

    async def chat_completion(self, **kwargs) -> AsyncStream[ChatCompletionChunk] | ChatCompletion:
        kwargs = OpenAIUtils.process_chat_completion_params(kwargs, self._default_config)
        return await self.chat.completions.create(**kwargs)
